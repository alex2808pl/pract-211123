Index: src/main/java/de/telran/lesson_14_20240417/SimpleManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.telran.lesson_14_20240417;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n/**\n *      * 3. Получить список сотрудников с зп > 1000\n *       * 2 Вычислить среднюю зарплату всех сотрудников\n *      * 4*. Получить список сотрудников из отдела маркетинг и увеличить зп на 15%\n *      * 5*. Получить сотрудника с самой низкой зп\n *      * 6*. Получить сотрудника с самой высокой зп\n *      * 7**. Получите сотрудников из всех отделов с максимальной зп\n *      * 8**. Сгрупировать сотрудников по должности\n *\n */\npublic class SimpleManager {\n    public static void main(String[] args) {\n\n        Manager manager1 = new Manager(\"Opanas\", \"Director\", \"Boss\", 12000.00);\n        Manager manager2 = new Manager(\"Izya\", \"PomDirect\", \"Planing\", 8000.00);\n        Manager manager6 = new Manager(\"Izyaslav\", \"PomDirect\", \"Planing\", 8000.00);\n        Manager manager8 = new Manager(\"ILlya\", \"PomDirect\", \"Planing\", 9000.00);\n        Manager manager3 = new Manager(\"Salomon\", \"SalesManager\", \"Boss\", 5000.00);\n        Manager manager7 = new Manager(\"Jork\", \"SalesManager\", \"Boss\", 9000.00);\n        Manager manager4 = new Manager(\"Anton\", \"Intern\", \"Sales\", 10000.00);\n        Manager manager5 = new Manager(\"Wasya\", \"JobManager\", \"Sales\", 8000.00);\n        Manager manager9 = new Manager(\"Wasya\", \"JobManager\", \"Sales\", 4000.00);\n        Manager manager10 = new Manager(\"Wasya\", \"JobManager\", \"Sales\", 5000.00);\n\n        List<Manager> managerList = List.of(manager2,manager1,manager3,manager4,manager5,manager6,manager7,manager8,manager9,manager10);\n\n        managerList.forEach(System.out::println);\n        List<Manager> salaryBig = managerList.stream()\n                .filter(manager -> manager.getSalary() >= 10000)\n                .collect(Collectors.toList());\n        System.out.println(salaryBig);\n\n        System.out.println(\" Вычислить среднюю зарплату всех сотрудников\");\n\n        OptionalDouble average = managerList.stream()\n                .mapToDouble(manager -> manager.getSalary())\n                .average() ;\n        System.out.println(average);\n\n        System.out.println(average.getAsDouble());\n\n        System.out.println(average.orElse(0.00));\n        System.out.println(average.isPresent());\n        System.out.println(average.isEmpty());\n\n\n        System.out.println(\"Получить список сотрудников из отдела Boss и увеличить зп на 15% \");\n\n        System.out.println(managerList.stream()\n                .filter(manager -> manager.getDepartmen().startsWith(\"Boss\"))\n                .peek(manager -> manager.setSalary(manager.getSalary() * 1.15))\n                .toList());\n\n        System.out.println(\"Получить сотрудника с самой низкой зп \");\n\n        System.out.println(managerList.stream()\n                .min(Comparator.comparing(Manager::getSalary)));\n\n        System.out.println(\" Получить сотрудника с самой высокой зп \");\n\n        System.out.println(managerList.stream()     //получаем только сумму\n                .mapToDouble(Manager::getSalary)\n                .max().getAsDouble());\n        // Если нужен сотрудник\n        System.out.println(managerList.stream()                  \n                .max(Comparator.comparing(Manager::getSalary)));\n\n\n\n\n        \n\n    }\n}\n
===================================================================
diff --git a/src/main/java/de/telran/lesson_14_20240417/SimpleManager.java b/src/main/java/de/telran/lesson_14_20240417/SimpleManager.java
--- a/src/main/java/de/telran/lesson_14_20240417/SimpleManager.java	
+++ b/src/main/java/de/telran/lesson_14_20240417/SimpleManager.java	
@@ -70,6 +70,8 @@
         System.out.println(managerList.stream()                  
                 .max(Comparator.comparing(Manager::getSalary)));
 
+        //Получите сотрудников из всех отделов с максимальной зп
+
 
 
 
